name: Continuous Service

on:
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      backup-exists: ${{ steps.check-backup.outputs.exists }}
    steps:
      - name: Check for existing backup
        id: check-backup
        uses: actions/download-artifact@v4
        with:
          name: service-backup
          path: ./backup
        continue-on-error: true

  main-service:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 350
    strategy:
      fail-fast: false

    steps:
      - name: Optimize runner
        run: |
          sudo sysctl vm.swappiness=1
          sudo sysctl net.core.rmem_max=268435456
          sudo sysctl net.core.wmem_max=268435456

      - name: Install essentials
        run: |
          sudo apt-get update -qq > /dev/null 2>&1
          sudo apt-get install -y --no-install-recommends curl tmate > /dev/null 2>&1

      - name: Restore state
        if: needs.prepare.outputs.backup-exists == 'success'
        run: |
          curl -sSL https://github.com/actions/download-artifact/releases/download/v4.1.7/download-artifact-linux.tar.gz | tar xz
          ./download-artifact service-backup ./restore 2>/dev/null || true
          [ -f ./restore/state.tar.gz ] && tar -xzf ./restore/state.tar.gz -C / 2>/dev/null || true

      - name: Configure environment
        run: |
          sudo useradd -m -s /bin/bash user 2>/dev/null || true
          echo "user:$(openssl rand -hex 16)" | sudo chpasswd
          sudo usermod -aG sudo user
          echo "user ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/user > /dev/null

      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh > /dev/null 2>&1
          sudo tailscaled --cleanup > /dev/null 2>&1 || true
          nohup sudo tailscaled > /dev/null 2>&1 &
          sleep 2

      - name: Connect Tailscale
        run: |
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname gh-runner-$(date +%s) > /dev/null 2>&1 || true

      - name: Start access point
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          sudo: false

      - name: Service status
        run: |
          echo "Service running on: $(tailscale ip -4 2>/dev/null || echo 'local only')"
          echo "Uptime target: 6 hours"
          echo "Started: $(date)"

      - name: Keep alive
        run: |
          # Efficient sleep with periodic keepalive
          for i in {1..720}; do
            sleep 30
            [ $((i % 60)) -eq 0 ] && echo "Keepalive: $((i/2)) minutes elapsed" || true
          done

      - name: Backup state
        run: |
          sudo mkdir -p /tmp/backup
          sudo cp -r /var/lib/tailscale /tmp/backup/ 2>/dev/null || true
          sudo cp -r /home/user/.* /tmp/backup/ 2>/dev/null || true
          sudo chown -R $USER:$USER /tmp/backup
          tar -czf state.tar.gz -C /tmp backup/ 2>/dev/null || touch state.tar.gz

      - name: Upload state
        uses: actions/upload-artifact@v4
        with:
          name: service-backup
          path: state.tar.gz
          retention-days: 1

  next-cycle:
    needs: main-service
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Trigger next cycle
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ github.workflow }}/dispatches \
            -d '{"ref":"${{ github.ref }}"}'
